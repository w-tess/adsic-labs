*************************************************************
* 01AUXPE Advanced DEsign for Signal Integrity and Compliance
* Stefano Grivet-Talocia, DET Politecnico di Torino, Italy
* This file generated by SGT on 15-Feb-2023
*************************************************************

*************************************************************
* Signal Integrity testcase IBM_topology_1
*************************************************************
* Three coupled differential lines connecting two chips
* through a module, from C4 bumps to C4 bumps.
* Reference system: IBM z16
* This example courtesy of Xiaomin Duan and Hubert Harrer
* IBM Deutschland R&D GmbH, Boeblingen, Germany
*************************************************************

*************************************************************
* SPICE models of all interconnects (generated by IdEM12)
*************************************************************
* All interconnects have 12 ports. Connection scheme is
* depicted below for the three differential pairs.
* ------------------
* 1 --- 2
* 3 --- 4
* ------------------
* 5 --- 6
* 7 --- 8
* ------------------
* 9 --- 10
* 11 --- 12
* ------------------
*************************************************************
* C4 escape wires (1mm length, two different materials)
.include subckt_4_C4escape_1mm_highloss_85ohm.cir
.include subckt_5_C4escape_1mm_lowloss_85ohm.cir
* Wiring on module (two lengths and two materials)
.include subckt_8_Module_wire_1mm_highloss_85ohm.cir
.include subckt_9_Module_wire_1mm_lowloss_85ohm.cir
.include subckt_10_Module_wire_5mm_highloss_85ohm.cir
.include subckt_11_Module_wire_5mm_lowloss_85ohm.cir
*************************************************************


*************************************************************
* Instantiate interconnect models - IBM Topology 1
* Node numbering: Y_kz with
* Y: section along channel
* k: index of (single-ended) interconnect
* z: {p,n} denoting positive/negative nodes of each port
*    [negative nodes {n} of all ports are grounded]
*************************************************************

* C4 escape wire: near end (comment/uncomment to select model)
X_C4_AB
+ A_1p 0 B_1p 0
+ A_2p 0 B_2p 0
+ A_3p 0 B_3p 0
+ A_4p 0 B_4p 0
+ A_5p 0 B_5p 0
+ A_6p 0 B_6p 0
*+ subckt_4_C4escape_1mm_highloss_85ohm
+ subckt_5_C4escape_1mm_lowloss_85ohm

* Module wiring (comment/uncomment to select model)
X_Module_BC
+ B_1p 0 C_1p 0
+ B_2p 0 C_2p 0
+ B_3p 0 C_3p 0
+ B_4p 0 C_4p 0
+ B_5p 0 C_5p 0
+ B_6p 0 C_6p 0
* + subckt_8_Module_wire_1mm_highloss_85ohm
+ subckt_9_Module_wire_1mm_lowloss_85ohm
* + subckt_10_Module_wire_5mm_highloss_85ohm
* + subckt_11_Module_wire_5mm_lowloss_85ohm

* C4 escape wire: far end (comment/uncomment to select model)
X_C4_CD
+ C_1p 0 D_1p 0
+ C_2p 0 D_2p 0
+ C_3p 0 D_3p 0
+ C_4p 0 D_4p 0
+ C_5p 0 D_5p 0
+ C_6p 0 D_6p 0
* + subckt_4_C4escape_1mm_highloss_85ohm
+ subckt_5_C4escape_1mm_lowloss_85ohm


*************************************************************
* Terminations, drivers, receivers
*************************************************************

* Termination, differential line 1, near end
X_NE_term1
+ A_1p 0
+ A_2p 0
+ diffTermination4nodes

* Termination, differential line 1, far end
X_FE_term1
+ D_1p 0
+ D_2p 0
+ diffTermination4nodes


* Driver, differential line 2, near end
X_NE_term2
+ A_3p 0
+ A_4p 0
+ diffDriver4nodes


* Termination, differential line 2, far end
X_FE_term2
+ D_3p 0
+ D_4p 0
+ diffTermination4nodes


* Termination, differential line 3, near end
X_NE_term3
+ A_5p 0
+ A_6p 0
+ diffTermination4nodes

* Termination, differential line 3, far end
X_FE_term3
+ D_5p 0
+ D_6p 0
+ diffTermination4nodes


.param R_s=10 Tbit=0.05e-9 Vp=1 Trise=0.01e-9
* Driver (pure differential, no grounding here)
.subckt diffDriver4nodes a_1 b_1 a_2 b_2
R_s1 a_1 a_10 {R_s}
R_s2 a_2 a_20 {R_s}
E_s1 a_10 b_1 SIG2 0 0.5
E_s2 a_20 b_2 SIG2 0 -0.5
* Vdrv drv 0 DC 0 AC 1 pwl(0 0 10p 1 100n 1)
* Vdrv drv 0 DC 0 AC 1 pwl(0 0 10p 1 50p 1 60p 0 100n 0)
* Vdrv drv 0 DC 0 AC 1 pwl(0 0 20p 1 100p 1 120p 0 100n 0)
xPRBS2 SIG2 0 VPRBS params: TB={TBit} Vmax={Vp} TR={Trise} seed=0
Rdum SIG2 0 1
.ends


.param R_d=85 C_d=0.1p
* Termination (pure differental, no grounding here)
.subckt diffTermination4nodes a_1 b_1 a_2 b_2
R_d a_1 a_2 {R_d}
C_d a_1 a_2 {C_d}
.ends


* auxiliary subcircuit to generate a PRBS signal (rise time is zero!)
* NRZ voltage swing: Vmax; Bit time: TB; Rise/Fall time: TR
* Use (positive integer) seed to shift PRBS sequence forward (randomize)
.subckt VPRBS 1 2 params: TB=1 Vmax=5 TR=0.1 seed=0
.param T=2*TB F=1/T BR=1/TB
* This generates a PRBS with zero rise times
B1 a 0 V={Vmax}*(rand(time/{TB}+{seed})>=.5)
R1 a 0 1
* This generates a trapezoidal wave with desired rise/fall times
* (it is a convolution with a pulse with {TR} width, exploiting the piecewise constant nature of signal B1)
B2 1 2 V= (time/{TR}-{TB}*floor(time/{TB})/{TR})*V(a)  + ({TB}*floor(time/{TB})/{TR} - time/{TR} + 1) * absdelay(V(a),{TR})
Ro 1 2 1
.ends
